<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="redlib.backend.dao.ClassesMapper">
  <resultMap id="BaseResultMap" type="redlib.backend.model.Classes">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="class_id" jdbcType="VARCHAR" property="classId" />
    <result column="class_name" jdbcType="VARCHAR" property="className" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="created_by" jdbcType="VARCHAR" property="createdBy" />
    <result column="updated_by" jdbcType="VARCHAR" property="updatedBy" />
  </resultMap>
  <sql id="Base_Column_List">
    id, class_id, class_name, description, created_at, updated_at, created_by, updated_by
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from classes
    where id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from classes
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="redlib.backend.model.Classes">
    insert into classes (class_id, class_name,
      description, created_at, updated_at, 
      created_by, updated_by)
    values (#{classId,jdbcType=VARCHAR}, #{className,jdbcType=VARCHAR},
      #{description,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, 
      #{createdBy,jdbcType=VARCHAR}, #{updatedBy,jdbcType=VARCHAR})
  </insert>

  <update id="updateByPrimaryKey" parameterType="redlib.backend.model.Classes">
    update classes
    set class_name = #{record.className},
        description = #{record.description},
        updated_at = #{date}
    where class_id = #{record.classId}
  </update>

  <!-- 获取总班级个数 -->
  <select id="count" resultType="integer">
    select count(*)
    from classes
  </select>

  <!-- 根据班级id获取班级信息 -->
  <select id="selectByClassId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from classes
    where class_id = #{classId}
  </select>

  <!-- 根据班级id删除班级 -->
  <delete id="deleteByClassId" parameterType="java.lang.String">
    delete from classes
    where class_id = #{classId}
  </delete>

  <!-- 获取班级(分页) -->
  <select id="listClass" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from classes
    limit #{offset}, #{limit}
  </select>

  <!-- 获取班级ID -->
  <select id="listClassId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from classes
  </select>

  <!-- 给班级导入学生 -->
  <update id="importStudent" parameterType="redlib.backend.model.Students">
    update students
    set class_ID = #{classId},
        class_name = #{className}
    where id = #{id}
  </update>
</mapper>